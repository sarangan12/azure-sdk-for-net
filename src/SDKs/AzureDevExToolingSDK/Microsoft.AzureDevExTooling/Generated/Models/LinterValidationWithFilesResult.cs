// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Tooling.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class LinterValidationWithFilesResult : LinterValidationResult
    {
        /// <summary>
        /// Initializes a new instance of the LinterValidationWithFilesResult
        /// class.
        /// </summary>
        public LinterValidationWithFilesResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LinterValidationWithFilesResult
        /// class.
        /// </summary>
        /// <param name="validationId">Validation Id.</param>
        /// <param name="commitHash">Git commit hash of where the validated
        /// files originate.</param>
        /// <param name="validationStatus">Task Status. Possible values
        /// include: 'NotStarted', 'InProgress', 'Finished', 'Failed'</param>
        /// <param name="createdAt">Created At Time</param>
        /// <param name="status">Status</param>
        /// <param name="issues">Linter Validation issues.</param>
        /// <param name="runtimeException">When present, describes the reason
        /// the validation couldn't be run.</param>
        /// <param name="directives">Directives to apply to the specs before
        /// linting like suppression and transformation.</param>
        public LinterValidationWithFilesResult(string validationId, string commitHash, ValidationStatus validationStatus, string createdAt, string status, IList<LinterIssue> issues, IList<string> fileUrls, ErrorObject runtimeException = default(ErrorObject), IList<Directive> directives = default(IList<Directive>))
            : base(validationId, commitHash, validationStatus, createdAt, status, issues, runtimeException)
        {
            FileUrls = fileUrls;
            Directives = directives;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "fileUrls")]
        public IList<string> FileUrls { get; set; }

        /// <summary>
        /// Gets or sets directives to apply to the specs before linting like
        /// suppression and transformation.
        /// </summary>
        [JsonProperty(PropertyName = "directives")]
        public IList<Directive> Directives { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (FileUrls == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FileUrls");
            }
            if (Directives != null)
            {
                foreach (var element in Directives)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
