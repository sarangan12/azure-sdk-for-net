// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Tooling.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Issue object of a validation.
    /// </summary>
    public partial class StaticValidationIssue
    {
        /// <summary>
        /// Initializes a new instance of the StaticValidationIssue class.
        /// </summary>
        public StaticValidationIssue()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the StaticValidationIssue class.
        /// </summary>
        /// <param name="fileUrl">Url of the file.</param>
        /// <param name="code">The code  for the issue.</param>
        /// <param name="id">Issue id.</param>
        /// <param name="message">The issue message.</param>
        /// <param name="severity">severity</param>
        /// <param name="source">Source location of the issue.</param>
        /// <param name="docUrl">The url to the issue's documentation.</param>
        public StaticValidationIssue(string fileUrl, string code, string id, string message, int severity, IssueSourceLocation source, string docUrl = default(string), object inner = default(object))
        {
            FileUrl = fileUrl;
            Code = code;
            Id = id;
            Message = message;
            Severity = severity;
            Source = source;
            DocUrl = docUrl;
            Inner = inner;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets url of the file.
        /// </summary>
        [JsonProperty(PropertyName = "fileUrl")]
        public string FileUrl { get; set; }

        /// <summary>
        /// Gets or sets the code  for the issue.
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or sets issue id.
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the issue message.
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or sets severity
        /// </summary>
        [JsonProperty(PropertyName = "severity")]
        public int Severity { get; set; }

        /// <summary>
        /// Gets or sets source location of the issue.
        /// </summary>
        [JsonProperty(PropertyName = "source")]
        public IssueSourceLocation Source { get; set; }

        /// <summary>
        /// Gets or sets the url to the issue's documentation.
        /// </summary>
        [JsonProperty(PropertyName = "docUrl")]
        public string DocUrl { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "inner")]
        public object Inner { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (FileUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "FileUrl");
            }
            if (Code == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Code");
            }
            if (Id == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Id");
            }
            if (Message == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Message");
            }
            if (Source == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Source");
            }
        }
    }
}
