// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Tooling.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Parameters for linter validation
    /// </summary>
    public partial class LinterParameters
    {
        /// <summary>
        /// Initializes a new instance of the LinterParameters class.
        /// </summary>
        public LinterParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LinterParameters class.
        /// </summary>
        /// <param name="repository">Name of the repository</param>
        /// <param name="branch">Name of the specific reference(Branch/Commit)
        /// in the repository.</param>
        /// <param name="configPath">Configuration path of the file.</param>
        /// <param name="apiTag">API Tag to be validated.</param>
        /// <param name="commitHash">Commit Hash to be validated.</param>
        /// <param name="filterType">Type of filter(ARM/SDK,etc). Possible
        /// values include: 'ARMViolation', 'SDKViolation', 'RPCViolation',
        /// 'Documentation'</param>
        /// <param name="token">Token to access private repositories.</param>
        public LinterParameters(string repository, string branch, string configPath, string apiTag, string commitHash, LinterIssueCategory? filterType = default(LinterIssueCategory?), string token = default(string))
        {
            Repository = repository;
            Branch = branch;
            ConfigPath = configPath;
            ApiTag = apiTag;
            CommitHash = commitHash;
            FilterType = filterType;
            Token = token;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the repository
        /// </summary>
        [JsonProperty(PropertyName = "repository")]
        public string Repository { get; set; }

        /// <summary>
        /// Gets or sets name of the specific reference(Branch/Commit) in the
        /// repository.
        /// </summary>
        [JsonProperty(PropertyName = "branch")]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or sets configuration path of the file.
        /// </summary>
        [JsonProperty(PropertyName = "configPath")]
        public string ConfigPath { get; set; }

        /// <summary>
        /// Gets or sets API Tag to be validated.
        /// </summary>
        [JsonProperty(PropertyName = "apiTag")]
        public string ApiTag { get; set; }

        /// <summary>
        /// Gets or sets commit Hash to be validated.
        /// </summary>
        [JsonProperty(PropertyName = "commitHash")]
        public string CommitHash { get; set; }

        /// <summary>
        /// Gets or sets type of filter(ARM/SDK,etc). Possible values include:
        /// 'ARMViolation', 'SDKViolation', 'RPCViolation', 'Documentation'
        /// </summary>
        [JsonProperty(PropertyName = "filterType")]
        public LinterIssueCategory? FilterType { get; set; }

        /// <summary>
        /// Gets or sets token to access private repositories.
        /// </summary>
        [JsonProperty(PropertyName = "token")]
        public string Token { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Repository == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Repository");
            }
            if (Branch == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Branch");
            }
            if (ConfigPath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConfigPath");
            }
            if (ApiTag == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ApiTag");
            }
            if (CommitHash == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CommitHash");
            }
        }
    }
}
