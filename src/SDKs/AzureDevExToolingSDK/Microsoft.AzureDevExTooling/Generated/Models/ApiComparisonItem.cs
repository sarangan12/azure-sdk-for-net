// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Tooling.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Api Comparison Result Item
    /// </summary>
    public partial class ApiComparisonItem
    {
        /// <summary>
        /// Initializes a new instance of the ApiComparisonItem class.
        /// </summary>
        public ApiComparisonItem()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApiComparisonItem class.
        /// </summary>
        /// <param name="code">Code to indicate the type of difference.</param>
        /// <param name="message">Detailed message to explain the
        /// difference.</param>
        /// <param name="impact">Impact of the difference. Possible values
        /// include: 'Warning', 'Error', 'Info'</param>
        /// <param name="docUrl">Link to the documentation to the code</param>
        /// <param name="mode">Type of the difference. Possible values include:
        /// 'Addition', 'Removal', 'Update'</param>
        /// <param name="issueSourceLocation">Location of the issue from the
        /// source.</param>
        /// <param name="issueTargetLocation">Location of the issue from the
        /// target.</param>
        public ApiComparisonItem(string code, string message, string impact, string docUrl = default(string), string mode = default(string), IssueSourceLocation issueSourceLocation = default(IssueSourceLocation), IssueSourceLocation issueTargetLocation = default(IssueSourceLocation))
        {
            Code = code;
            DocUrl = docUrl;
            Message = message;
            Impact = impact;
            Mode = mode;
            IssueSourceLocation = issueSourceLocation;
            IssueTargetLocation = issueTargetLocation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets code to indicate the type of difference.
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or sets link to the documentation to the code
        /// </summary>
        [JsonProperty(PropertyName = "docUrl")]
        public string DocUrl { get; set; }

        /// <summary>
        /// Gets or sets detailed message to explain the difference.
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or sets impact of the difference. Possible values include:
        /// 'Warning', 'Error', 'Info'
        /// </summary>
        [JsonProperty(PropertyName = "impact")]
        public string Impact { get; set; }

        /// <summary>
        /// Gets or sets type of the difference. Possible values include:
        /// 'Addition', 'Removal', 'Update'
        /// </summary>
        [JsonProperty(PropertyName = "mode")]
        public string Mode { get; set; }

        /// <summary>
        /// Gets or sets location of the issue from the source.
        /// </summary>
        [JsonProperty(PropertyName = "issueSourceLocation")]
        public IssueSourceLocation IssueSourceLocation { get; set; }

        /// <summary>
        /// Gets or sets location of the issue from the target.
        /// </summary>
        [JsonProperty(PropertyName = "issueTargetLocation")]
        public IssueSourceLocation IssueTargetLocation { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Code == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Code");
            }
            if (Message == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Message");
            }
            if (Impact == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Impact");
            }
        }
    }
}
