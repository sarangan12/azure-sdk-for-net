// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Tooling.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class ModelValidationIssue : StaticValidationIssue
    {
        /// <summary>
        /// Initializes a new instance of the ModelValidationIssue class.
        /// </summary>
        public ModelValidationIssue()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ModelValidationIssue class.
        /// </summary>
        /// <param name="fileUrl">Url of the file.</param>
        /// <param name="code">The code  for the issue.</param>
        /// <param name="id">Issue id.</param>
        /// <param name="message">The issue message.</param>
        /// <param name="severity">severity</param>
        /// <param name="source">Source location of the issue.</param>
        /// <param name="operationId">The operationId for which the model has
        /// issues.</param>
        /// <param name="scenario">The scenario for which the model has
        /// issues.</param>
        /// <param name="responseCode">Response code for which the model
        /// validation failed.</param>
        /// <param name="origin">The source of the issue. Possible values
        /// include: 'Response', 'Request', 'Global'</param>
        /// <param name="docUrl">The url to the issue's documentation.</param>
        /// <param name="exampleSource">Source location of the issue.</param>
        /// <param name="title">Path to the spec object with issues.</param>
        /// <param name="pathInModel">Path to the property with issues inside a
        /// model.</param>
        /// <param name="description">The description associated with the
        /// object with issues.</param>
        public ModelValidationIssue(string fileUrl, string code, string id, string message, int severity, IssueSourceLocation source, string operationId, string scenario, string responseCode, IssueOrigin origin, IList<string> paramsProperty, string docUrl = default(string), object inner = default(object), IssueSourceLocation exampleSource = default(IssueSourceLocation), string title = default(string), string pathInModel = default(string), string description = default(string))
            : base(fileUrl, code, id, message, severity, source, docUrl, inner)
        {
            OperationId = operationId;
            Scenario = scenario;
            ResponseCode = responseCode;
            Origin = origin;
            ParamsProperty = paramsProperty;
            ExampleSource = exampleSource;
            Title = title;
            PathInModel = pathInModel;
            Description = description;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets the operationId for which the model has issues.
        /// </summary>
        [JsonProperty(PropertyName = "operationId")]
        public string OperationId { get; set; }

        /// <summary>
        /// Gets or sets the scenario for which the model has issues.
        /// </summary>
        [JsonProperty(PropertyName = "scenario")]
        public string Scenario { get; set; }

        /// <summary>
        /// Gets or sets response code for which the model validation failed.
        /// </summary>
        [JsonProperty(PropertyName = "responseCode")]
        public string ResponseCode { get; set; }

        /// <summary>
        /// Gets or sets the source of the issue. Possible values include:
        /// 'Response', 'Request', 'Global'
        /// </summary>
        [JsonProperty(PropertyName = "origin")]
        public IssueOrigin Origin { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "params")]
        public IList<string> ParamsProperty { get; set; }

        /// <summary>
        /// Gets or sets source location of the issue.
        /// </summary>
        [JsonProperty(PropertyName = "exampleSource")]
        public IssueSourceLocation ExampleSource { get; set; }

        /// <summary>
        /// Gets or sets path to the spec object with issues.
        /// </summary>
        [JsonProperty(PropertyName = "title")]
        public string Title { get; set; }

        /// <summary>
        /// Gets or sets path to the property with issues inside a model.
        /// </summary>
        [JsonProperty(PropertyName = "pathInModel")]
        public string PathInModel { get; set; }

        /// <summary>
        /// Gets or sets the description associated with the object with
        /// issues.
        /// </summary>
        [JsonProperty(PropertyName = "description")]
        public string Description { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (OperationId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OperationId");
            }
            if (Scenario == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Scenario");
            }
            if (ResponseCode == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResponseCode");
            }
            if (ParamsProperty == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ParamsProperty");
            }
        }
    }
}
