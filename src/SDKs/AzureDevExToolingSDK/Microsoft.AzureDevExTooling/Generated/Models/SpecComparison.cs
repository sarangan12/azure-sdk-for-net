// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Tooling.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Spec Comparison parameter that contains url/tag.
    /// </summary>
    public partial class SpecComparison
    {
        /// <summary>
        /// Initializes a new instance of the SpecComparison class.
        /// </summary>
        public SpecComparison()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the SpecComparison class.
        /// </summary>
        /// <param name="url">Url of the file. Url might point to a readme file
        /// (with tag)/json file.</param>
        /// <param name="tag">Tag to be used for the comparison.</param>
        /// <param name="token">Token to access the Url.</param>
        public SpecComparison(string url, string tag = default(string), string token = default(string))
        {
            Url = url;
            Tag = tag;
            Token = token;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets url of the file. Url might point to a readme file
        /// (with tag)/json file.
        /// </summary>
        [JsonProperty(PropertyName = "url")]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets tag to be used for the comparison.
        /// </summary>
        [JsonProperty(PropertyName = "tag")]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or sets token to access the Url.
        /// </summary>
        [JsonProperty(PropertyName = "token")]
        public string Token { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Url == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Url");
            }
        }
    }
}
