// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Tooling.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Linter Validation Result Object.
    /// </summary>
    public partial class LinterValidationResult
    {
        /// <summary>
        /// Initializes a new instance of the LinterValidationResult class.
        /// </summary>
        public LinterValidationResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LinterValidationResult class.
        /// </summary>
        /// <param name="validationId">Validation Id.</param>
        /// <param name="commitHash">Commit Hash</param>
        /// <param name="configPath">Config Path</param>
        /// <param name="apiTag">API Tag</param>
        /// <param name="branch">Branch</param>
        /// <param name="repoUrl">Repository URL</param>
        /// <param name="isDone">Task Status</param>
        /// <param name="isFailed">Task Status</param>
        /// <param name="createdAt">Created At Time</param>
        /// <param name="tries">Name of the repository.</param>
        /// <param name="status">Status</param>
        /// <param name="validationResults">Validation results from
        /// Linter</param>
        public LinterValidationResult(string validationId, string commitHash, string configPath, string apiTag, string branch, string repoUrl, bool isDone, bool isFailed, string createdAt, int tries, string status, LinterValidationResultValidationResults validationResults)
        {
            ValidationId = validationId;
            CommitHash = commitHash;
            ConfigPath = configPath;
            ApiTag = apiTag;
            Branch = branch;
            RepoUrl = repoUrl;
            IsDone = isDone;
            IsFailed = isFailed;
            CreatedAt = createdAt;
            Tries = tries;
            Status = status;
            ValidationResults = validationResults;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets validation Id.
        /// </summary>
        [JsonProperty(PropertyName = "validationId")]
        public string ValidationId { get; set; }

        /// <summary>
        /// Gets or sets commit Hash
        /// </summary>
        [JsonProperty(PropertyName = "commitHash")]
        public string CommitHash { get; set; }

        /// <summary>
        /// Gets or sets config Path
        /// </summary>
        [JsonProperty(PropertyName = "configPath")]
        public string ConfigPath { get; set; }

        /// <summary>
        /// Gets or sets API Tag
        /// </summary>
        [JsonProperty(PropertyName = "apiTag")]
        public string ApiTag { get; set; }

        /// <summary>
        /// Gets or sets branch
        /// </summary>
        [JsonProperty(PropertyName = "branch")]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or sets repository URL
        /// </summary>
        [JsonProperty(PropertyName = "repoUrl")]
        public string RepoUrl { get; set; }

        /// <summary>
        /// Gets or sets task Status
        /// </summary>
        [JsonProperty(PropertyName = "isDone")]
        public bool IsDone { get; set; }

        /// <summary>
        /// Gets or sets task Status
        /// </summary>
        [JsonProperty(PropertyName = "isFailed")]
        public bool IsFailed { get; set; }

        /// <summary>
        /// Gets or sets created At Time
        /// </summary>
        [JsonProperty(PropertyName = "createdAt")]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or sets name of the repository.
        /// </summary>
        [JsonProperty(PropertyName = "tries")]
        public int Tries { get; set; }

        /// <summary>
        /// Gets or sets status
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets validation results from Linter
        /// </summary>
        [JsonProperty(PropertyName = "validationResults")]
        public LinterValidationResultValidationResults ValidationResults { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ValidationId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ValidationId");
            }
            if (CommitHash == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CommitHash");
            }
            if (ConfigPath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConfigPath");
            }
            if (ApiTag == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ApiTag");
            }
            if (Branch == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Branch");
            }
            if (RepoUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "RepoUrl");
            }
            if (CreatedAt == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CreatedAt");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (ValidationResults == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ValidationResults");
            }
        }
    }
}
