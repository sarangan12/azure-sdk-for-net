// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Tooling.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Parameters for linter validation
    /// </summary>
    public partial class LinterWithConfigParameters
    {
        /// <summary>
        /// Initializes a new instance of the LinterWithConfigParameters class.
        /// </summary>
        public LinterWithConfigParameters()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LinterWithConfigParameters class.
        /// </summary>
        /// <param name="repository">Name of the repository</param>
        /// <param name="gitRef">Name of the specific reference in the git
        /// repository. This can be a branch, tag or a commit hash.</param>
        /// <param name="configPath">Configuration path of the file.</param>
        /// <param name="apiTag">API Tag in the configuration file to be
        /// validated.</param>
        /// <param name="filterType">Filter on the type of issues to be
        /// reported. Possible values include: 'ARMViolation', 'SDKViolation',
        /// 'Documentation'</param>
        /// <param name="token">Token to access private git
        /// repositories.</param>
        public LinterWithConfigParameters(string repository, string gitRef, string configPath, string apiTag, LinterIssueCategory? filterType = default(LinterIssueCategory?), string token = default(string))
        {
            Repository = repository;
            GitRef = gitRef;
            ConfigPath = configPath;
            ApiTag = apiTag;
            FilterType = filterType;
            Token = token;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets name of the repository
        /// </summary>
        [JsonProperty(PropertyName = "repository")]
        public string Repository { get; set; }

        /// <summary>
        /// Gets or sets name of the specific reference in the git repository.
        /// This can be a branch, tag or a commit hash.
        /// </summary>
        [JsonProperty(PropertyName = "gitRef")]
        public string GitRef { get; set; }

        /// <summary>
        /// Gets or sets configuration path of the file.
        /// </summary>
        [JsonProperty(PropertyName = "configPath")]
        public string ConfigPath { get; set; }

        /// <summary>
        /// Gets or sets API Tag in the configuration file to be validated.
        /// </summary>
        [JsonProperty(PropertyName = "apiTag")]
        public string ApiTag { get; set; }

        /// <summary>
        /// Gets or sets filter on the type of issues to be reported. Possible
        /// values include: 'ARMViolation', 'SDKViolation', 'Documentation'
        /// </summary>
        [JsonProperty(PropertyName = "filterType")]
        public LinterIssueCategory? FilterType { get; set; }

        /// <summary>
        /// Gets or sets token to access private git repositories.
        /// </summary>
        [JsonProperty(PropertyName = "token")]
        public string Token { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Repository == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Repository");
            }
            if (GitRef == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "GitRef");
            }
            if (ConfigPath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConfigPath");
            }
            if (ApiTag == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ApiTag");
            }
        }
    }
}
