// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Tooling.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Api Comparison Result
    /// </summary>
    public partial class ApiComparisonResult
    {
        /// <summary>
        /// Initializes a new instance of the ApiComparisonResult class.
        /// </summary>
        public ApiComparisonResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApiComparisonResult class.
        /// </summary>
        /// <param name="status">Status of the long running operation.</param>
        /// <param name="comparisonId">Unique Comparison Id generated by the
        /// server.</param>
        /// <param name="createdAt">Time of creation for the
        /// comparison.</param>
        /// <param name="comparisonStatus">Status of the comparison
        /// operation.</param>
        /// <param name="comparisonResults">Api Comparison results</param>
        /// <param name="input">Input provided for the comparison
        /// operation</param>
        /// <param name="runtimeException">Exception message occured during the
        /// comparison operation.</param>
        public ApiComparisonResult(string status, string comparisonId, string createdAt, string comparisonStatus, IList<ApiComparisonItem> comparisonResults, ApiComparisonResultInput input, ErrorObject runtimeException = default(ErrorObject))
        {
            Status = status;
            ComparisonId = comparisonId;
            CreatedAt = createdAt;
            ComparisonStatus = comparisonStatus;
            RuntimeException = runtimeException;
            ComparisonResults = comparisonResults;
            Input = input;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets status of the long running operation.
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets unique Comparison Id generated by the server.
        /// </summary>
        [JsonProperty(PropertyName = "comparisonId")]
        public string ComparisonId { get; set; }

        /// <summary>
        /// Gets or sets time of creation for the comparison.
        /// </summary>
        [JsonProperty(PropertyName = "createdAt")]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or sets status of the comparison operation.
        /// </summary>
        [JsonProperty(PropertyName = "comparisonStatus")]
        public string ComparisonStatus { get; set; }

        /// <summary>
        /// Gets or sets exception message occured during the comparison
        /// operation.
        /// </summary>
        [JsonProperty(PropertyName = "runtimeException")]
        public ErrorObject RuntimeException { get; set; }

        /// <summary>
        /// Gets or sets api Comparison results
        /// </summary>
        [JsonProperty(PropertyName = "comparisonResults")]
        public IList<ApiComparisonItem> ComparisonResults { get; set; }

        /// <summary>
        /// Gets or sets input provided for the comparison operation
        /// </summary>
        [JsonProperty(PropertyName = "input")]
        public ApiComparisonResultInput Input { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (ComparisonId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ComparisonId");
            }
            if (CreatedAt == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CreatedAt");
            }
            if (ComparisonStatus == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ComparisonStatus");
            }
            if (ComparisonResults == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ComparisonResults");
            }
            if (Input == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Input");
            }
            if (ComparisonResults != null)
            {
                foreach (var element in ComparisonResults)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
            if (Input != null)
            {
                Input.Validate();
            }
        }
    }
}
