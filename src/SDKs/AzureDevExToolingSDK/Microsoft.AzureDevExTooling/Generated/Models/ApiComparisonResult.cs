// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Tooling.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Api Comparison Result Object
    /// </summary>
    public partial class ApiComparisonResult
    {
        /// <summary>
        /// Initializes a new instance of the ApiComparisonResult class.
        /// </summary>
        public ApiComparisonResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the ApiComparisonResult class.
        /// </summary>
        /// <param name="code">Code to indicate the type of difference.</param>
        /// <param name="docUrl">Link to the documentation to the code</param>
        /// <param name="message">Detailed message to explain the
        /// difference.</param>
        /// <param name="jsonRef">Json Reference of the difference.</param>
        /// <param name="jsonPath">Json Path of the difference.</param>
        /// <param name="impact">Impact of the difference. Possible values
        /// include: 'Warning', 'Error', 'Info'</param>
        /// <param name="issueSourceLocation">Source location of the
        /// issue.</param>
        public ApiComparisonResult(string code, string docUrl, string message, string jsonRef, string jsonPath, string impact, IssueSourceLocation issueSourceLocation)
        {
            Code = code;
            DocUrl = docUrl;
            Message = message;
            JsonRef = jsonRef;
            JsonPath = jsonPath;
            Impact = impact;
            IssueSourceLocation = issueSourceLocation;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets code to indicate the type of difference.
        /// </summary>
        [JsonProperty(PropertyName = "code")]
        public string Code { get; set; }

        /// <summary>
        /// Gets or sets link to the documentation to the code
        /// </summary>
        [JsonProperty(PropertyName = "docUrl")]
        public string DocUrl { get; set; }

        /// <summary>
        /// Gets or sets detailed message to explain the difference.
        /// </summary>
        [JsonProperty(PropertyName = "message")]
        public string Message { get; set; }

        /// <summary>
        /// Gets or sets json Reference of the difference.
        /// </summary>
        [JsonProperty(PropertyName = "jsonRef")]
        public string JsonRef { get; set; }

        /// <summary>
        /// Gets or sets json Path of the difference.
        /// </summary>
        [JsonProperty(PropertyName = "jsonPath")]
        public string JsonPath { get; set; }

        /// <summary>
        /// Gets or sets impact of the difference. Possible values include:
        /// 'Warning', 'Error', 'Info'
        /// </summary>
        [JsonProperty(PropertyName = "impact")]
        public string Impact { get; set; }

        /// <summary>
        /// Gets or sets source location of the issue.
        /// </summary>
        [JsonProperty(PropertyName = "issueSourceLocation")]
        public IssueSourceLocation IssueSourceLocation { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Code == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Code");
            }
            if (DocUrl == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "DocUrl");
            }
            if (Message == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Message");
            }
            if (JsonRef == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "JsonRef");
            }
            if (JsonPath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "JsonPath");
            }
            if (Impact == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Impact");
            }
            if (IssueSourceLocation == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "IssueSourceLocation");
            }
        }
    }
}
