// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Tooling.Models
{
    using Microsoft.Rest;
    using Microsoft.Rest.Serialization;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    /// <summary>
    /// Traffic validation summary.
    /// </summary>
    public partial class TrafficValidationSummary
    {
        /// <summary>
        /// Initializes a new instance of the TrafficValidationSummary class.
        /// </summary>
        public TrafficValidationSummary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TrafficValidationSummary class.
        /// </summary>
        /// <param name="validationId">Validation Id of the task.</param>
        /// <param name="startDate">Start date of the traffic validation
        /// interval.</param>
        /// <param name="endDate">End date of the traffic validation
        /// interval.</param>
        /// <param name="repository">End date of the traffic validation
        /// interval.</param>
        /// <param name="commitHash">The commit hash against which the live
        /// traffic was validated against.</param>
        /// <param name="regions">Azure regions against which the specs will be
        /// validated against.</param>
        /// <param name="resourceProvider">Resource provider for which traffic
        /// validation was performed.</param>
        /// <param name="apiVersions">API Versions of the resource provider
        /// used for traffic validation.</param>
        /// <param name="operations">Summary of the traffic validation for each
        /// operation.</param>
        /// <param name="validationStatus">Task Status. Possible values
        /// include: 'NotStarted', 'InProgress', 'Finished', 'Failed'</param>
        /// <param name="status">Status</param>
        public TrafficValidationSummary(string validationId, System.DateTime startDate, System.DateTime endDate, string repository, string commitHash, IList<Region?> regions, string resourceProvider, IList<string> apiVersions, IList<OperationSummary> operations, ValidationStatus validationStatus, string status)
        {
            ValidationId = validationId;
            StartDate = startDate;
            EndDate = endDate;
            Repository = repository;
            CommitHash = commitHash;
            Regions = regions;
            ResourceProvider = resourceProvider;
            ApiVersions = apiVersions;
            Operations = operations;
            ValidationStatus = validationStatus;
            Status = status;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets validation Id of the task.
        /// </summary>
        [JsonProperty(PropertyName = "validationId")]
        public string ValidationId { get; set; }

        /// <summary>
        /// Gets or sets start date of the traffic validation interval.
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "startDate")]
        public System.DateTime StartDate { get; set; }

        /// <summary>
        /// Gets or sets end date of the traffic validation interval.
        /// </summary>
        [JsonConverter(typeof(DateJsonConverter))]
        [JsonProperty(PropertyName = "endDate")]
        public System.DateTime EndDate { get; set; }

        /// <summary>
        /// Gets or sets end date of the traffic validation interval.
        /// </summary>
        [JsonProperty(PropertyName = "repository")]
        public string Repository { get; set; }

        /// <summary>
        /// Gets or sets the commit hash against which the live traffic was
        /// validated against.
        /// </summary>
        [JsonProperty(PropertyName = "commitHash")]
        public string CommitHash { get; set; }

        /// <summary>
        /// Gets or sets azure regions against which the specs will be
        /// validated against.
        /// </summary>
        [JsonProperty(PropertyName = "regions")]
        public IList<Region?> Regions { get; set; }

        /// <summary>
        /// Gets or sets resource provider for which traffic validation was
        /// performed.
        /// </summary>
        [JsonProperty(PropertyName = "resourceProvider")]
        public string ResourceProvider { get; set; }

        /// <summary>
        /// Gets or sets API Versions of the resource provider used for traffic
        /// validation.
        /// </summary>
        [JsonProperty(PropertyName = "apiVersions")]
        public IList<string> ApiVersions { get; set; }

        /// <summary>
        /// Gets or sets summary of the traffic validation for each operation.
        /// </summary>
        [JsonProperty(PropertyName = "operations")]
        public IList<OperationSummary> Operations { get; set; }

        /// <summary>
        /// Gets or sets task Status. Possible values include: 'NotStarted',
        /// 'InProgress', 'Finished', 'Failed'
        /// </summary>
        [JsonProperty(PropertyName = "validationStatus")]
        public ValidationStatus ValidationStatus { get; set; }

        /// <summary>
        /// Gets or sets status
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ValidationId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ValidationId");
            }
            if (Repository == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Repository");
            }
            if (CommitHash == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CommitHash");
            }
            if (Regions == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Regions");
            }
            if (ResourceProvider == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResourceProvider");
            }
            if (ApiVersions == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ApiVersions");
            }
            if (Operations == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Operations");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (Operations != null)
            {
                foreach (var element in Operations)
                {
                    if (element != null)
                    {
                        element.Validate();
                    }
                }
            }
        }
    }
}
