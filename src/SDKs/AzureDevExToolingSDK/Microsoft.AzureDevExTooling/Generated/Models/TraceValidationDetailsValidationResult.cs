// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Tooling.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class TraceValidationDetailsValidationResult
    {
        /// <summary>
        /// Initializes a new instance of the
        /// TraceValidationDetailsValidationResult class.
        /// </summary>
        public TraceValidationDetailsValidationResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the
        /// TraceValidationDetailsValidationResult class.
        /// </summary>
        /// <param name="repository">repository</param>
        /// <param name="branch">branch</param>
        /// <param name="resourceProvider">Resource Provider</param>
        /// <param name="apiVersion">API Version</param>
        /// <param name="startDate">Start Date</param>
        /// <param name="endDate">End Date</param>
        /// <param name="validationId">Validation Id.</param>
        /// <param name="commitHash">Commit Hash</param>
        /// <param name="isDone">Task Status</param>
        /// <param name="isFailed">Task Status</param>
        /// <param name="createdAt">Created At Time</param>
        /// <param name="tries">Name of the repository.</param>
        public TraceValidationDetailsValidationResult(string repository, string branch, string resourceProvider, string apiVersion, string startDate, string endDate, string validationId, string commitHash, bool isDone, bool isFailed, string createdAt, int tries, IList<TraceValidationResult> validationResults, IList<TraceValidationResult> operationsNotFound, IList<TraceValidationError> uniqueErrors)
        {
            Repository = repository;
            Branch = branch;
            ResourceProvider = resourceProvider;
            ApiVersion = apiVersion;
            StartDate = startDate;
            EndDate = endDate;
            ValidationId = validationId;
            CommitHash = commitHash;
            IsDone = isDone;
            IsFailed = isFailed;
            CreatedAt = createdAt;
            Tries = tries;
            ValidationResults = validationResults;
            OperationsNotFound = operationsNotFound;
            UniqueErrors = uniqueErrors;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets repository
        /// </summary>
        [JsonProperty(PropertyName = "repository")]
        public string Repository { get; set; }

        /// <summary>
        /// Gets or sets branch
        /// </summary>
        [JsonProperty(PropertyName = "branch")]
        public string Branch { get; set; }

        /// <summary>
        /// Gets or sets resource Provider
        /// </summary>
        [JsonProperty(PropertyName = "resourceProvider")]
        public string ResourceProvider { get; set; }

        /// <summary>
        /// Gets or sets API Version
        /// </summary>
        [JsonProperty(PropertyName = "apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Gets or sets start Date
        /// </summary>
        [JsonProperty(PropertyName = "startDate")]
        public string StartDate { get; set; }

        /// <summary>
        /// Gets or sets end Date
        /// </summary>
        [JsonProperty(PropertyName = "endDate")]
        public string EndDate { get; set; }

        /// <summary>
        /// Gets or sets validation Id.
        /// </summary>
        [JsonProperty(PropertyName = "validationId")]
        public string ValidationId { get; set; }

        /// <summary>
        /// Gets or sets commit Hash
        /// </summary>
        [JsonProperty(PropertyName = "commitHash")]
        public string CommitHash { get; set; }

        /// <summary>
        /// Gets or sets task Status
        /// </summary>
        [JsonProperty(PropertyName = "isDone")]
        public bool IsDone { get; set; }

        /// <summary>
        /// Gets or sets task Status
        /// </summary>
        [JsonProperty(PropertyName = "isFailed")]
        public bool IsFailed { get; set; }

        /// <summary>
        /// Gets or sets created At Time
        /// </summary>
        [JsonProperty(PropertyName = "createdAt")]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or sets name of the repository.
        /// </summary>
        [JsonProperty(PropertyName = "tries")]
        public int Tries { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "validationResults")]
        public IList<TraceValidationResult> ValidationResults { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "operationsNotFound")]
        public IList<TraceValidationResult> OperationsNotFound { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "uniqueErrors")]
        public IList<TraceValidationError> UniqueErrors { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Repository == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Repository");
            }
            if (Branch == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Branch");
            }
            if (ResourceProvider == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ResourceProvider");
            }
            if (ApiVersion == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ApiVersion");
            }
            if (StartDate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "StartDate");
            }
            if (EndDate == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "EndDate");
            }
            if (ValidationId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ValidationId");
            }
            if (CommitHash == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CommitHash");
            }
            if (CreatedAt == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "CreatedAt");
            }
            if (ValidationResults == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ValidationResults");
            }
            if (OperationsNotFound == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OperationsNotFound");
            }
            if (UniqueErrors == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "UniqueErrors");
            }
        }
    }
}
