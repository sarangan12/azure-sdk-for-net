// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Tooling.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class OperationsSummary
    {
        /// <summary>
        /// Initializes a new instance of the OperationsSummary class.
        /// </summary>
        public OperationsSummary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the OperationsSummary class.
        /// </summary>
        /// <param name="operationId">Id of Operation</param>
        /// <param name="totalCount">Total number of issues</param>
        /// <param name="uniqueErrorsCount">Number of errors</param>
        /// <param name="failingCount">Number of failures</param>
        /// <param name="passingCount">Number passing</param>
        public OperationsSummary(string operationId, double totalCount, double uniqueErrorsCount, double failingCount, double passingCount)
        {
            OperationId = operationId;
            TotalCount = totalCount;
            UniqueErrorsCount = uniqueErrorsCount;
            FailingCount = failingCount;
            PassingCount = passingCount;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets id of Operation
        /// </summary>
        [JsonProperty(PropertyName = "operationId")]
        public string OperationId { get; set; }

        /// <summary>
        /// Gets or sets total number of issues
        /// </summary>
        [JsonProperty(PropertyName = "totalCount")]
        public double TotalCount { get; set; }

        /// <summary>
        /// Gets or sets number of errors
        /// </summary>
        [JsonProperty(PropertyName = "uniqueErrorsCount")]
        public double UniqueErrorsCount { get; set; }

        /// <summary>
        /// Gets or sets number of failures
        /// </summary>
        [JsonProperty(PropertyName = "failingCount")]
        public double FailingCount { get; set; }

        /// <summary>
        /// Gets or sets number passing
        /// </summary>
        [JsonProperty(PropertyName = "passingCount")]
        public double PassingCount { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (OperationId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "OperationId");
            }
        }
    }
}
