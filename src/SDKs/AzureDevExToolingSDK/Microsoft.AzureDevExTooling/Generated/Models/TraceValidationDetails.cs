// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Tooling.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    public partial class TraceValidationDetails
    {
        /// <summary>
        /// Initializes a new instance of the TraceValidationDetails class.
        /// </summary>
        public TraceValidationDetails()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TraceValidationDetails class.
        /// </summary>
        /// <param name="status">Status</param>
        public TraceValidationDetails(string status, TraceValidationDetailsValidationResult validationResult)
        {
            Status = status;
            ValidationResult = validationResult;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets status
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "validationResult")]
        public TraceValidationDetailsValidationResult ValidationResult { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (ValidationResult == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ValidationResult");
            }
            if (ValidationResult != null)
            {
                ValidationResult.Validate();
            }
        }
    }
}
