// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Tooling.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class LinterValidationWithConfigResult : LinterValidationResult
    {
        /// <summary>
        /// Initializes a new instance of the LinterValidationWithConfigResult
        /// class.
        /// </summary>
        public LinterValidationWithConfigResult()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the LinterValidationWithConfigResult
        /// class.
        /// </summary>
        /// <param name="validationId">Validation Id.</param>
        /// <param name="commitHash">Git commit hash of where the validated
        /// files originate.</param>
        /// <param name="validationStatus">Task Status. Possible values
        /// include: 'NotStarted', 'InProgress', 'Finished', 'Failed'</param>
        /// <param name="createdAt">Created At Time</param>
        /// <param name="status">Status</param>
        /// <param name="issues">Linter Validation issues.</param>
        /// <param name="configPath">Config Path used.</param>
        /// <param name="apiTag">API Tag used.</param>
        /// <param name="runtimeException">When present, describes the reason
        /// the validation couldn't be run.</param>
        /// <param name="repository">Repository URL</param>
        public LinterValidationWithConfigResult(string validationId, string commitHash, ValidationStatus validationStatus, string createdAt, string status, IList<LinterIssue> issues, string configPath, string apiTag, ErrorObject runtimeException = default(ErrorObject), string repository = default(string))
            : base(validationId, commitHash, validationStatus, createdAt, status, issues, runtimeException)
        {
            Repository = repository;
            ConfigPath = configPath;
            ApiTag = apiTag;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets repository URL
        /// </summary>
        [JsonProperty(PropertyName = "repository")]
        public string Repository { get; set; }

        /// <summary>
        /// Gets or sets config Path used.
        /// </summary>
        [JsonProperty(PropertyName = "configPath")]
        public string ConfigPath { get; set; }

        /// <summary>
        /// Gets or sets API Tag used.
        /// </summary>
        [JsonProperty(PropertyName = "apiTag")]
        public string ApiTag { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public override void Validate()
        {
            base.Validate();
            if (ConfigPath == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ConfigPath");
            }
            if (ApiTag == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ApiTag");
            }
        }
    }
}
