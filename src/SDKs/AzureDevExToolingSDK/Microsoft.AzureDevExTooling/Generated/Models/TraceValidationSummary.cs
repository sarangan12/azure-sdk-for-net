// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Tooling.Models
{
    using Microsoft.Rest;
    using Newtonsoft.Json;
    using System.Linq;

    /// <summary>
    /// Trace Validation Summary
    /// </summary>
    public partial class TraceValidationSummary
    {
        /// <summary>
        /// Initializes a new instance of the TraceValidationSummary class.
        /// </summary>
        public TraceValidationSummary()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the TraceValidationSummary class.
        /// </summary>
        /// <param name="validationId">Validation Id.</param>
        /// <param name="status">Status</param>
        public TraceValidationSummary(string validationId, string status, TraceValidationSummarySummaryResult summaryResult)
        {
            ValidationId = validationId;
            Status = status;
            SummaryResult = summaryResult;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// Gets or sets validation Id.
        /// </summary>
        [JsonProperty(PropertyName = "validationId")]
        public string ValidationId { get; set; }

        /// <summary>
        /// Gets or sets status
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "summaryResult")]
        public TraceValidationSummarySummaryResult SummaryResult { get; set; }

        /// <summary>
        /// Validate the object.
        /// </summary>
        /// <exception cref="ValidationException">
        /// Thrown if validation fails
        /// </exception>
        public virtual void Validate()
        {
            if (ValidationId == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "ValidationId");
            }
            if (Status == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "Status");
            }
            if (SummaryResult == null)
            {
                throw new ValidationException(ValidationRules.CannotBeNull, "SummaryResult");
            }
        }
    }
}
