// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Tooling
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for Tools.
    /// </summary>
    public static partial class ToolsExtensions
    {
            /// <summary>
            /// Get Linter Validation results
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for linting
            /// </param>
            public static LinterValidationResult ExecuteLinterValidation(this ITools operations, LinterParameters parameters)
            {
                return operations.ExecuteLinterValidationAsync(parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Linter Validation results
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// Parameters for linting
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<LinterValidationResult> ExecuteLinterValidationAsync(this ITools operations, LinterParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteLinterValidationWithHttpMessagesAsync(parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get Semantic Validation result.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// The parameters for static validation (model and semantic)
            /// </param>
            public static SemanticValidationResult ExecuteSemanticValidation(this ITools operations, StaticValidationParameters parameters)
            {
                return operations.ExecuteSemanticValidationAsync(parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get Semantic Validation result.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// The parameters for static validation (model and semantic)
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<SemanticValidationResult> ExecuteSemanticValidationAsync(this ITools operations, StaticValidationParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteSemanticValidationWithHttpMessagesAsync(parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute model validation result.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// parameters
            /// </param>
            public static ModelValidationResult ExecuteModelValidation(this ITools operations, StaticValidationParameters parameters)
            {
                return operations.ExecuteModelValidationAsync(parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute model validation result.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<ModelValidationResult> ExecuteModelValidationAsync(this ITools operations, StaticValidationParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteModelValidationWithHttpMessagesAsync(parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Execute trace validation summary.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// parameters
            /// </param>
            public static TraceValidationSummary ExecuteTraceValidation(this ITools operations, TraceValidationParameters parameters)
            {
                return operations.ExecuteTraceValidationAsync(parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute trace validation summary.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TraceValidationSummary> ExecuteTraceValidationAsync(this ITools operations, TraceValidationParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ExecuteTraceValidationWithHttpMessagesAsync(parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get trace validation result.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='validationId'>
            /// Validation Id for which the results must be retrieved.
            /// </param>
            /// <param name='operationId'>
            /// Operation Id for which the results must be retrieved.
            /// </param>
            /// <param name='regions'>
            /// Regions for trace validation
            /// </param>
            public static TraceValidationDetails GetTraceValidationDetails(this ITools operations, string validationId, string operationId = default(string), IList<string> regions = default(IList<string>))
            {
                return operations.GetTraceValidationDetailsAsync(validationId, operationId, regions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get trace validation result.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='validationId'>
            /// Validation Id for which the results must be retrieved.
            /// </param>
            /// <param name='operationId'>
            /// Operation Id for which the results must be retrieved.
            /// </param>
            /// <param name='regions'>
            /// Regions for trace validation
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TraceValidationDetails> GetTraceValidationDetailsAsync(this ITools operations, string validationId, string operationId = default(string), IList<string> regions = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetTraceValidationDetailsWithHttpMessagesAsync(validationId, operationId, regions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
