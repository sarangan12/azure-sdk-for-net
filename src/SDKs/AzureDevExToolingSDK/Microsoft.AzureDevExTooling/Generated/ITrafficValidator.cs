// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Tooling
{
    using Microsoft.Rest;
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// TrafficValidator operations.
    /// </summary>
    public partial interface ITrafficValidator
    {
        /// <summary>
        /// Execute validation against real traffic.
        /// </summary>
        /// <param name='parameters'>
        /// parameters
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorObjectException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<TrafficValidationSummary>> ValidateWithHttpMessagesAsync(TrafficValidationParameters parameters, Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
        /// <summary>
        /// Get the traffic validation result.
        /// </summary>
        /// <param name='validationId'>
        /// Validation Id for which the results must be retrieved.
        /// </param>
        /// <param name='operationId'>
        /// Operation Id for which the results must be retrieved.
        /// </param>
        /// <param name='regions'>
        /// Regions for traffic against which traffic validation will run. If
        /// not specified it will return for all regions.
        /// </param>
        /// <param name='apiVersions'>
        /// API versions of the resource provider to use for the real traffic
        /// validation for all api versions. If not specified, results for all
        /// of them will be returned.
        /// </param>
        /// <param name='customHeaders'>
        /// The headers that will be added to request.
        /// </param>
        /// <param name='cancellationToken'>
        /// The cancellation token.
        /// </param>
        /// <exception cref="ErrorObjectException">
        /// Thrown when the operation returned an invalid status code
        /// </exception>
        /// <exception cref="Microsoft.Rest.SerializationException">
        /// Thrown when unable to deserialize the response
        /// </exception>
        /// <exception cref="Microsoft.Rest.ValidationException">
        /// Thrown when a required parameter is null
        /// </exception>
        Task<HttpOperationResponse<TrafficValidationDetails>> GetDetailsWithHttpMessagesAsync(string validationId, string operationId = default(string), IList<Region?> regions = default(IList<Region?>), IList<string> apiVersions = default(IList<string>), Dictionary<string, List<string>> customHeaders = null, CancellationToken cancellationToken = default(CancellationToken));
    }
}
