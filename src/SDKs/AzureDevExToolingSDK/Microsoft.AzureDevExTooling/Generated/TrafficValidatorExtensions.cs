// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace Tooling
{
    using Models;
    using System.Collections;
    using System.Collections.Generic;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for TrafficValidator.
    /// </summary>
    public static partial class TrafficValidatorExtensions
    {
            /// <summary>
            /// Execute validation against real traffic.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// parameters
            /// </param>
            public static TrafficValidationSummary Validate(this ITrafficValidator operations, TrafficValidationParameters parameters)
            {
                return operations.ValidateAsync(parameters).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Execute validation against real traffic.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='parameters'>
            /// parameters
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TrafficValidationSummary> ValidateAsync(this ITrafficValidator operations, TrafficValidationParameters parameters, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ValidateWithHttpMessagesAsync(parameters, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get the traffic validation result.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='validationId'>
            /// Validation Id for which the results must be retrieved.
            /// </param>
            /// <param name='operationId'>
            /// Operation Id for which the results must be retrieved.
            /// </param>
            /// <param name='regions'>
            /// Regions for traffic against which traffic validation will run. If not
            /// specified it will return for all regions.
            /// </param>
            /// <param name='apiVersions'>
            /// API versions of the resource provider to use for the real traffic
            /// validation for all api versions. If not specified, results for all of them
            /// will be returned.
            /// </param>
            public static TrafficValidationDetails GetDetails(this ITrafficValidator operations, string validationId, string operationId = default(string), IList<Region?> regions = default(IList<Region?>), IList<string> apiVersions = default(IList<string>))
            {
                return operations.GetDetailsAsync(validationId, operationId, regions, apiVersions).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get the traffic validation result.
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='validationId'>
            /// Validation Id for which the results must be retrieved.
            /// </param>
            /// <param name='operationId'>
            /// Operation Id for which the results must be retrieved.
            /// </param>
            /// <param name='regions'>
            /// Regions for traffic against which traffic validation will run. If not
            /// specified it will return for all regions.
            /// </param>
            /// <param name='apiVersions'>
            /// API versions of the resource provider to use for the real traffic
            /// validation for all api versions. If not specified, results for all of them
            /// will be returned.
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<TrafficValidationDetails> GetDetailsAsync(this ITrafficValidator operations, string validationId, string operationId = default(string), IList<Region?> regions = default(IList<Region?>), IList<string> apiVersions = default(IList<string>), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetDetailsWithHttpMessagesAsync(validationId, operationId, regions, apiVersions, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
